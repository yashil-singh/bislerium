@page "/"
@inject NavigationManager NavManager

<div class="container p-4 position-relative">
    <div class="row row-cols-2">
        <div class='row @(orderItems?.Count() != null && orderItems?.Count() > 0 ? "col-9" : "col-12")'>
            <h1>Welcome to Bislerium Café</h1>

            <p class="body-text">
                Where every sip is a moment of pure bliss. Get ready to indulge in the finest
                coffee experience – brewed with passion and served with a smile. We're here
                to elevate your coffee moments to a whole new level. Order with ease and
                savor the extraordinary. Cheers to great coffee and warm moments!"
            </p>

            <nav class="d-flex justify-content-between align-items-center bg-light rounded mb-3">
                <ul class="nav nav-tabs">
                    <li class="nav-item ">
                        <a class='nav-link btn @(tabFilter == "All" ? "active" : "")' @onclick='()=>TabFilter("All")'>All</a>
                    </li>
                    <li class="nav-item">
                        <a class='nav-link btn @(tabFilter == "Coffee" ? "active" : "")' @onclick='()=>TabFilter("Coffee")'>Coffee</a>
                    </li>
                    <li class="nav-item">
                        <a class='nav-link btn @(tabFilter == "Add-In" ? "active" : "")' @onclick='()=>TabFilter("Add-In")'>Add-In</a>
                    </li>
                </ul>
                <div class="w-25">
                    <div class="d-flex">
                        <input type="search" class="form-control search" placeholder="Search" @oninput="SearchTaskName" />
                    </div>
                </div>
            </nav>

            <div class='row @(orderItems?.Count() != null && orderItems?.Count() > 0 ? "row-cols-1 row-cols-lg-2 row-cols-xl-3" :  "row-cols-1 row-cols-lg-3 row-cols-xl-4") m-auto'>
                @{
                    IEnumerable<MenuItems> menuItemsList = menuItems;

                    if (tabFilter == "Coffee")
                    {
                        menuItemsList = menuItemsList.Where(t => t.ItemType == Items.Coffee);
                    }
                    else if (tabFilter == "Add-In")
                    {
                        menuItemsList = menuItemsList.Where(t => t.ItemType == Items.AddIn);
                    }

                    foreach (var menuItem in menuItemsList)
                    {
                        <div class="col">
                            <div class="card pb-3 mb-3" style="box-shadow: var(--boxShadow); border-radius: 6px; cursor: pointer;" @onclick="() => OpenDetailsModal(menuItem)">
                                <img src="@menuItem.ImageURL" class="card-img-top" alt="itemImage">
                                <div class="card-body" style="min-height: 80px">
                                    <div class="d-flex">
                                        <h6 class="card-title fw-bold" style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; min-height: 50px; max-height: 50px; width: 60%;">
                                            @menuItem.Name
                                        </h6>
                                        <h5 class="card-subtitle mb-2 text-end" style="color: var(--primary); width: 40%;">Rs. @menuItem.Price</h5>
                                    </div>
                                </div>
                                <button type="button" @onclick="() => OpenDetailsModal(menuItem)" class="btn btn-primary" style="margin: 0px 0.75rem;">Order</button>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <div class='@(orderItems?.Count() != null && orderItems?.Count() > 0 ? "col-3" :  "d-none")'>
            <div class="order-container end-0">
                @if (orderItems != null)
                {
                    <div class="d-flex flex-column justify-content-between h-100">
                        <div>
                            <h2 class="mb-3">Orders</h2>
                            @foreach (var orderItem in orderItems)
                            {   
                                <div class="d-flex flex-column">
                                    <div class="d-flex justify-content-between">
                                        @MenuItemService.GetItemByID(orderItem.ItemID).Name x @orderItem.Quantity
                                        <strong style="color: var(--primary)">Rs. @orderItem.ItemTotal</strong>
                                    </div>
                                    <div class="d-flex gap-2">
                                        <i class="bi bi-pencil-square" @onclick="() => OpenItemEditModal(orderItem)" style="color: var(--primary); cursor: pointer;"></i>
                                        <i class="bi bi-trash-fill" @onclick="() => OpenItemRemoveModal(orderItem)" style="color: red; cursor: pointer;"></i>
                                    </div>
                                </div>
                            }
                        </div>
                        <div>
                            @if (!string.IsNullOrEmpty(checkoutErrorMessage))
                            {
                                <AlertMessage Type="danger" Message="@checkoutErrorMessage" />
                            }
                            <div>
                                <div class="form-floating mt-3 mb-3">
                                    <input type="text" class="form-control" name="memberNumber" placeholder="Membership Number" @bind="memberNumber">
                                    <label for="memberNumber">Membership Number</label>
                                </div>
                            </div>
                            <div class="d-flex align-items-center justify-content-between pt-3" style="border-top: 2px solid lightgray">
                                <h4>Total: </h4>
                                <h3 style="color: var(--primary);">Rs. @orderItems.Sum(item => item.ItemTotal)</h3>
                            </div>
                            <div class="d-flex justify-content-between align-items-center pt-3" style="border-top: 2px solid lightgray">
                                <button type="button" @onclick="OpenOrderCancelModal" class="btn">Cancel</button>
                                <button type="button" class="btn btn-primary" @onclick="HandleCheckOut" disabled="@(isDisabled ? true : false)">Check Out</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@if(showOrderCancelModal)
{
    <Modal Title="Cancel Order" OnClose="@OnOrderCancelModal" OkLabel="Confirm" CancelLabel="Go Back">
        <p>Are you sure you want to cancel the order?</p>
        @if (!string.IsNullOrEmpty(cancelOrderErrorMessage))
        {
            <AlertMessage Type="danger" Message="@cancelOrderErrorMessage" />
        }
    </Modal>
}

@if(showItemCancelModal)
{
    <Modal Title="Cancel Order" OnClose="@OnItemRemoveModalClose" OkLabel="Confirm" CancelLabel="Go Back">
        <p>Are you sure you want to remove this item form the order?</p>
        @if (!string.IsNullOrEmpty(cancelItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@cancelItemErrorMessage" />
        }
    </Modal>
}

@if (showItemDetailModal)
{
    <Modal Title="@modalTitle" OnClose="@OnDetailsModalClose" OkLabel="@modalOkLabel" CancelLabel="Go Back">
        <div>
            @if (!string.IsNullOrEmpty(addItemErrorMessage))
            {
                <div class="col-md-12">
                    <AlertMessage Type="danger" Message="@addItemErrorMessage" />
                </div>
            }
            <div class="d-flex justify-content-between mb-3">
                <div>
                    <div>
                        <h3>@currentMenuItem.Name</h3>
                        <h4 style="color: var(--primary)">Rs. @currentMenuItem.Price</h4>
                    </div>
                    <strong>Description:</strong>
                    <p class="body-text">
                        @currentMenuItem.Description
                    </p>
                </div>
                <img src="@currentMenuItem.ImageURL" style="min-width: 250px; max-width: 250px;" />
            </div>
            <div class="d-flex justify-content-between align-items-center">
                Quantity:
                <div style="color: var(--primary); border: 2px solid; border-color: var(--primary); border-radius: 16px; background-color: white; padding: 2px;">
                    <div class="d-flex align-items-center gap-2">
                        <button style="color: var(--primary); border-radius: 16px; outline: none; border: none; background-color: inherit;" @onclick="Decrement">-</button>
                        <span style="min-width: 15px; text-align: center" id="counter">@quantity</span>
                        <button style="color: var(--primary); border-radius: 16px; outline: none; border: none; background-color: inherit;" @onclick="Increment">+</button>
                    </div>
                </div>
            </div>
        </div>
    </Modal>
}

@if (showAddMemberModal)
{
    <Modal Title="Create Membership" OkLabel="Create" CancelLabel="Cancel" OnClose="@OnAddMemberModalClose">
        @if(!string.IsNullOrEmpty(addMemberErrorMessage))
        {
            <AlertMessage Message="@addMemberErrorMessage" Type="danger"/>
        }
        else
        {
            <AlertMessage Type="info" Message="A new customer has been found!" />
        }
        <div class="form-floating mt-3 mb-3">
            <input type="text" class="form-control" name="memberNumber" placeholder="Customer Number" @bind="memberNumber">
            <label for="memberNumber">Customer Number</label>
        </div>
        <div class="form-floating mt-3 mb-3">
            <input type="text" class="form-control" name="memberNumber" placeholder="Customer Name" @bind="memberName">
            <label for="memberNumber">Customer Name</label>
        </div>
    </Modal>
}

@if(showOrderConfirmModal)
{
    <Modal Title="Order Confirmation" OnClose="@OnOrderConfirmModalClose" OkLabel="Confirm" CancelLabel="Go Back">
        <strong>Items</strong>
        @foreach (var orderItem in orderItems)
        {
            <div class="d-flex flex-column mb-3">
                <div class="d-flex justify-content-between">
                    @MenuItemService.GetItemByID(orderItem.ItemID).Name x @orderItem.Quantity
                    <strong>Rs. @orderItem.ItemTotal</strong>
                </div>
            </div>
        }

        @if (discountAvailable)
        {
            <div class="mt-3">
                <AlertMessage Type="info" Message="Discount Available!" />
                <div class="d-flex justify-content-between mb-3">
                    <strong>Discount:</strong> <strong class="text-danger">-@discount%</strong>
                </div>
                
            </div>
        }
        <div class="modal-footer p-0 d-flex justify-content-between mt-2">
            <strong style="font-size: 1.5rem;">Grand Total:</strong>  <strong style="color: var(--primary); font-size: 1.5rem;">Rs. @OrderService.CalculateGrandTotal(orderItems, discount)</strong>
        </div>
    </Modal>
}

@if (showOrderSuccessModal)
{
    <Modal Title="Order Placed" OnClose="@OnOrderSuccessModalClose" OkLabel="Finish">
        <p>Your order has been received, please stay tuned while it is being prepared.</p>
        @if (!string.IsNullOrEmpty(redeemSuccessMessage))
        {
            <AlertMessage Type="success" Message="@redeemSuccessMessage" />
        }
        @if (redeemAvailable)
        {
            
            <div class="d-flex justify-content-between">
                <strong>You have a free coffee waiting for you!</strong>
                <button class="btn btn-primary" @onclick="HandleRedeem">Redeem</button>
            </div>

        }
    </Modal>
}


@code {
    [CascadingParameter]
    private GlobalState session { get; set; }

    private List<MenuItems> menuItems { get; set; }
    private MenuItems currentMenuItem { get; set; }

    // Current State of the items
    private OrderItems currentOrderItem { get; set; }

    // Selected menu items
    private List<OrderItems>? orderItems { get; set; }
    private Orders currentOrder { get; set; }

    // To control the visibility of the modal
    private bool showItemDetailModal { get; set; }
    private bool showOrderCancelModal { get; set; }
    private bool showItemCancelModal { get; set; }
    private bool showEditItemModal { get; set; }
    private bool showOrderSuccessModal { get; set; }
    private bool showOrderConfirmModal { get; set; }
    private bool showAddMemberModal { get; set; }

    // For the modal view
    private string modalTitle { get; set; }
    private string modalOkLabel { get; set; }
    private string addItemErrorMessage { get; set; } = "";
    private string cancelOrderErrorMessage { get; set; } = "";
    private string cancelItemErrorMessage { get; set; } = "";
    private string editItemErrorMessage { get; set; } = "";
    private string checkoutErrorMessage { get; set; } = "";
    private string orderConfirmErrorMessage { get; set; } = "";
    private string addMemberErrorMessage { get; set; } = "";
    private string redeemSuccessMessage { get; set; } = "";

    // For sorting
    private string tabFilter = "All";
    private string sortBy = "coffee";
    private string sortDirection = "up";

    private int quantity { get; set; } = 0;
    private float currentTotal { get; set; }
    private string? memberNumber { get; set; }
    private string? memberName { get; set; }
    private int memberOrderCount { get; set; }
    private bool redeemAvailable { get; set; } = false;
    private bool discountAvailable { get; set; } = false;
    private float discount { get; set; } = 0;
    private float grandTotal { get; set; }
    private bool isDisabled { get; set; }

    protected override void OnInitialized()
    {
        menuItems = MenuItemService.GetAll();

        if (session.CurrentUser == null)
        {
            NavManager.NavigateTo("/login");
        }
    }

    // To increase the value of the quantity counter
    private void Increment()
    {
        quantity++;
    }

    // To decrese the value of the quantity counter
    private void Decrement()
    {
        if (quantity <= 0)
        {
            return;
        }
        else
        {
            quantity--;
        }
    }

    // For filtering
    private void TabFilter(string status)
    {
        tabFilter = status;
    }

    // For searching
    private void SearchTaskName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            menuItems = MenuItemService.GetAll().Where(t =>
            t.Name.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            menuItems = MenuItemService.GetAll();
        }
    }

    // Initiate the modal that shows item details
    private void OpenDetailsModal(MenuItems currentItem)
    {
        modalTitle = "Details";
        modalOkLabel = "Order";
        quantity = 0;
        currentMenuItem = currentItem;
        showItemDetailModal = true;
    }

    // Modal action to edit the quantity of an item
    private void OpenItemEditModal(OrderItems currOrderItem)
    {
        modalTitle = "Edit Order";
        modalOkLabel = "Edit";
        currentOrderItem = currOrderItem;
        quantity = currOrderItem.Quantity;
        currentMenuItem = MenuItemService.GetItemByID(currentOrderItem.ItemID);
        showItemDetailModal = true;
    }

    // Actions for closing the details modal
    private void OnDetailsModalClose(bool isCancel)
    {
        if (isCancel)
        {
            showItemDetailModal = false;
            addItemErrorMessage = "";
        }
        else
        {
            try
            {
                if (quantity <= 0)
                {
                    addItemErrorMessage = "Quantity must not be less than 1.";
                    return;
                }

                if (currentMenuItem == null)
                {
                    addItemErrorMessage = "No items are selected. Please select an item.";
                    return;
                }

                if (currentOrderItem != null)
                {
                    currentOrderItem.Quantity = quantity;
                    currentOrderItem.ItemTotal = quantity * (float)currentMenuItem.Price;
                    currentOrderItem = null;
                }
                else
                {
                    orderItems = OrderService.AddItemToOrderList(orderItems, currentMenuItem, quantity, session.CurrentUser.ID);
                }

                showItemDetailModal = false;
                currentMenuItem = null;
                currentOrderItem = null;
                addItemErrorMessage = "";
            }
            catch (Exception e)
            {
                addItemErrorMessage = e.Message;
            }
        }
    }


    // Initiate the modal to remove an item from the orders list
    private void OpenItemRemoveModal(OrderItems currOrderItem)
    {
        showItemCancelModal = true;
        currentOrderItem = currOrderItem;
    }

    // Modal action to delete an item from the orders list
    private void OnItemRemoveModalClose(bool isCancel)
    {
        if (isCancel)
        {
            showItemCancelModal = false;
            currentOrderItem = null;
        }
        else
        {
            try
            {
                orderItems = orderItems.Where(x => x.ItemID != currentOrderItem.ItemID).ToList();
                showItemCancelModal = false;
                currentOrderItem = null;
            }
            catch (Exception e)
            {
                cancelItemErrorMessage = e.Message;
            }
        }
    }

    // Initiate the modal to cancel the order
    private void OpenOrderCancelModal()
    {
        showOrderCancelModal = true;
        checkoutErrorMessage = "";

    }

    // Modal action to cancel the order
    private void OnOrderCancelModal(bool isCancel)
    {
        if (isCancel)
        {
            showOrderCancelModal = false;
        }
        else
        {
            try
            {
                orderItems = null;
                showOrderCancelModal = false;
                memberNumber = "";
                discount = 0;
            }
            catch (Exception e)
            {
                cancelOrderErrorMessage = e.Message;
                return;
            }
        }
    }

    private void OpenAddMemberModal()
    {
        showAddMemberModal = true;
        addMemberErrorMessage = "";
        discount = 0;
    }

    private void OnAddMemberModalClose(bool isCancel)
    {
        if(isCancel)
        {
            showAddMemberModal = false;
            memberName = "";
        }
        else
        {

        }
        try
        {
            if(memberName == null || memberName == "")
            {
                addMemberErrorMessage = "Please provide customer's name.";
                return;
            }

            if(memberNumber == null || memberNumber == "")
            {
                addMemberErrorMessage = "Please provide customer's number";
                return;
            }

            MemberService.Create(session.CurrentUser.ID, memberName, memberNumber);
            memberName = "";
            showAddMemberModal = false;
            HandleCheckOut();
            addItemErrorMessage = "";
        }
        catch(Exception e)
        {
            addMemberErrorMessage = "";
        }
    }

    // To handle checkout/store order record to json
    private void HandleCheckOut()
    {
        if (memberNumber == "" || memberNumber == null)
        {
            checkoutErrorMessage = "Please provide a number";
            return;
        }
        var addedMember = MemberService.GetByNumber(memberNumber);
        if (addedMember == null)
        {
            OpenAddMemberModal();
            return;
        }
        checkoutErrorMessage = "";

        if (orderItems.Count < 1)
        {
            isDisabled = true;
            checkoutErrorMessage = "";
        }
        else
        {
            try
            {
                if (memberNumber != null)
                {
                    var validMember = MemberService.GetByNumber(memberNumber);
                    if (validMember == null)
                    {
                        checkoutErrorMessage = "Member not found.";
                        return;
                    }

                    redeemAvailable = OrderService.CheckRedeemAvailability(validMember.MemberNumber);
                    discountAvailable = OrderService.CheckDiscountAvailability(validMember.MemberNumber);
                    if (discountAvailable)
                    {
                        discount = 10;
                    }
                }
                showOrderConfirmModal = true;
                checkoutErrorMessage = "";
            }
            catch (Exception e)
            {
                checkoutErrorMessage = e.Message;
            }
        }
    }

    private void OnOrderConfirmModalClose(bool isCancel)
    {
        if (isCancel)
        {
            showOrderConfirmModal = false;
            discount = 0;
        }
        else
        {
            try
            {
                discount = discountAvailable ? 10 : 0;
                OrderService.CreateOrder(orderItems, discount, memberNumber, session.CurrentUser.ID);
                showOrderConfirmModal = false;
                showOrderSuccessModal = true;
            }
            catch (Exception e)
            {
                orderConfirmErrorMessage = e.Message;
            }

        }
    }

    // Modal action when closing the order success moadal
    private void OnOrderSuccessModalClose()
    {
        orderItems = null;
        currentMenuItem = null;
        showOrderSuccessModal = false;
        memberNumber = "";
        discountAvailable = false;
        redeemAvailable = false;
        redeemSuccessMessage = "";
    }

    private void HandleRedeem()
    {
        redeemSuccessMessage = "Coffee redeemed. Thank you for being a loyal customer!";
        redeemAvailable = false;
    }
}