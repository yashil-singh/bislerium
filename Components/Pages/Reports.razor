@page "/reports"
@inject NavigationManager NavManager
@using System.Diagnostics

<div class="container p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Reports</h1>
        <div class="d-flex justify-content-center gap-2" style="height: 40px;">
            <select class="form-select" @bind="selectedOption">
                <option value="all">All</option>
                <option value="daily">Daily</option>
                <option value="monthly">Monthly</option>
            </select>

            @if (selectedOption == "daily")
            {
                <input type="date" class="form-control text-left" placeholder="Select Date" @bind="selectedDate">
            }
            else if (selectedOption == "monthly")
            {
                <input type="month" class="form-control text-left" placeholder="Select Month" @bind="selectedDate">
            }

            <button class="btn btn-primary" @onclick="FilterOrders">View</button>
        </div>
        <button class="btn btn-primary" @onclick="HandleGeneratePDF">Generate PDF</button>
    </div>

    <div class="mb-5">
        <h5>Top 5s</h5>

        <table class="table">
            <thead>
                <tr>
                    <th>Items</th>
                    <th>Total Revenue</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in GetTop5ItemsByRevenue())
                {
                    <tr>
                        <td>@item.ItemName</td>
                        <td>Rs. @item.TotalRevenue</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    

    <div class="d-flex justify-content-between">
        <h5>Transactions</h5>
        <p style="font-size: 20px;">Total Revenue: <strong style="color: var(--primary);">Rs. @(orders.Sum(order => order.OrderTotal))</strong></p>
    </div>
        
    
    <table class="table">
        <thead>
            <tr>
                <th>Customer Number</th>
                <th>Item</th>
                <th>Total</th>
                <th>Discount</th>
                <th>Order Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.MemberNumber</td>
                    <td>
                        @foreach (var menuItem in order.Items)
                        {
                            var menuItemDetails = MenuItemService.GetItemByID(menuItem.ItemID);
                            if (menuItem != null)
                            {
                                <p>@menuItemDetails.Name x @menuItem.Quantity - Rs. @menuItem.ItemTotal</p>
                            }
                        }
                    </td>
                    <td>Rs. @order.OrderTotal</td>
                    <td>@order.Discount%</td>
                    <td>@order.OrderDate.ToString("MMM dd, yyyy h:mm tt")</td>
                </tr>
            }
        </tbody>
        
    </table>
    @if (orders.Count == 0)
    {
        <h2 class="text-center">No orders found!</h2>
    }
</div>

@code {
    [CascadingParameter]
    private GlobalState session { get; set; }
    private List<Orders> orders { get; set; }
    private List<Orders> topItems { get; set; }

    private string selectedOption { get; set; } = "all";
    private DateTime selectedDate = DateTime.Today;

    protected override void OnInitialized()
    {
        orders = OrderService.GetAllOrders();
    }

    private void FilterOrders()
    {
        if(selectedOption == "daily")
        {
            orders = OrderService.GetOrdersByDate(selectedDate);
        }
        else if(selectedOption == "monthly")
        {
            orders = OrderService.GetOrdersByMonth(selectedDate);
        }
        else
        {
            orders = OrderService.GetAllOrders();
        }
    }

    // Class to store the top items
    public class TopItem
    {
        public string ItemName { get; set; }
        public float TotalRevenue { get; set; }
    }

    private List<TopItem> GetTop5ItemsByRevenue()
    {
        List<TopItem> topItems = orders
            .SelectMany(order => order.Items)
            .GroupBy(item => item.ItemID)
            .Select(group => new TopItem
                {
                    ItemName = MenuItemService.GetItemByID(group.Key)?.Name,
                    TotalRevenue = group.Sum(item => item.ItemTotal)
                })
            .OrderByDescending(item => item.TotalRevenue)
            .Take(5)
            .ToList();

        return topItems;
    }

    private void HandleGeneratePDF()
    {
        string fileName = "";
        if (selectedOption == "all")
        {
            fileName = "all_orders.pdf";
        }
        else if(selectedOption == "daily")
        {
            fileName = selectedDate.ToString("dd-MM-yyyy") + "_orders.pdf";
        }
        else
        {
            fileName = selectedDate.ToString("MMM yyyy") + "_orders.pdf";
        }

        var topItems = GetTop5ItemsByRevenue();
        PDFService.SaveAllOrdersPDF(topItems, orders.Sum(order => order.OrderTotal), orders, fileName);
    }
}
